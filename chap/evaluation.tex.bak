\subsection{Performance Evaluation}
%\subsection{The distribution of AES execution time}
%The Figure~\ref{aesdistri} shows the distribution of AES execution time of the original AES and the AES using our defense scheme. The original AES execution time is distributed all positions on x axis means the execution time is affected by the different input plaintexts. However, the execution time of AES with our defense scheme is distributed at position that is less than the computation threshold ,the WET and the position larger than WET. Therefore, the relation between the AES execution time and the different input plaintexts is eliminated. So our defense scheme is efficient against the cache timing attacks.
%
%\begin{figure}
%  \centering
%  \includegraphics[width=0.7\textwidth]{pic/aesdistruction.pdf}\\
%  \caption{the distribution of AES execution time of the original AES and the AES using our defense scheme.}\label{aesdistri}
%\end{figure}

%\textbf{Eliminating remote cache timing side channels.}


Our scheme aims to make the observed AES execution time independent of the input. Figure~\ref{pic:sec} shows the distributions of AES execution time for $2^{30}$ different plaintexts. It is clearly that most of the execution time is less than TWOCM or no less than WET using the {\scshape{Warm+Delay}} scheme.

\begin{figure}[b]
  \centering
  % Requires \usepackage{graphicx}
  \includegraphics[width=0.6\textwidth]{pic/securityvalidate.pdf}\\
  \caption{The observed AES execution time with different plaintext.}\label{pic:sec}
\end{figure}


\noindent\textbf{Performance.}
We have evaluated the probability \verb+warm+ with the probability $0$, $1/2$, $1/3$ and $1$, and our scheme under low and high computing and memory reading workload when the interval of OS scheduler is $1$ and $4$ms.
In each condition we perform $2^{30}$ AES encryptions.
We use the benchmark SysBench to simulate computing and memory reading workload in parallel with the AES encryption.
For computing workload, we run  SysBench in its CPU mode, which  launches $16$ threads to issue 10K requests to search the prime up to 300K on one CPU core.
For memroy reading workload, we adopt SysBench with $16$ threads in its memory mode, which reads or writes 32KB block each time to operate the total  3GB data on one CPU core. While the the AES encryption is on the same core.

From observations, the execution time of our defense scheme is less than $1.29$ times of the original AES. The main overhead is caused by the timer function.
Figure~\ref{pic:eval} validates that our {\scshape{Warm+Delay}} scheme is the optimal one.

%In each environment, we compute the original AES execution time, the AES execution time that using our defense scheme, the AES execution time that never performing the cache warm, the AES execution time that every time that performing the cache warm and the AES execution time that performing the cache warm with the probability of 1/2 and 1/3, which is corresponding to the four methods of the cache warm strategy. The experiments' results is in Figure~\ref{aesperf250}.


%From the figure the execution time of the AES with our defense scheme is 1.97 times of the original AES. The main influence factor of the performance is the four timers because the timers spend much time. Meanwhile, compared with other cache warm method our defense scheme is the most efficient.

%The clock cycle of the system in the above experiment is 4ms. To find out the effect to the AES execution by the periodical process scheduling, we also do the same experiment on the system whose clock cycle is 10ms and 1ms. The result is in Figure~\ref{fig:subfig}.

\begin{figure}[t]
    \centering
    \includegraphics[width=0.7\textwidth]{pic/performancecompare.pdf}\\
    \caption{AES execution performance with different clock cycle}
    \label{pic:eval} %% label for entire figure
\end{figure}

Moreover, we have measured the number of AES execution time which is greater than TWOCM in different workload conditions. This value represent the $P_{evict}$. From the Table~\ref{tbl:pevict} , the $P_{evict}$ is less than 0.005 which proves the best performance of our {\scshape{Warm+Delay}} scheme according to the Theorem 4.
\begin{table}[t]
  \centering
  \small
  \caption{The value of $P_{evict}$ in different workload conditions.}
  \label{tbl:pevict}
   \begin{tabular}{|c|c|c|c|c|}
   \hline
   {interval of OS scheduler}           & low workload      & high CPU workload & high mem workload   \\
   \hline
   {1ms} & 0.0028 & 0.0037 & 0.0041 \\
   \hline
   {4ms} & 0.0020 & 0.0026 & 0.0038  \\
   \hline
   \end{tabular}
\end{table}
%
%0.002812382
%0.003727464
%0.00410855
%0.002035624
%0.002603109
%0.003815562


%无负载，高负载cpu ， 高负载内存读取运算 三种情况下的：
%原始AES计算时间
%不进行warm的AES
%每次进行warm的AES
%概率为1/2,1/3 进行warm的AES
%条件warm（我们的方案） 的AES 的计算时间

%
%\begin{CJK}{UTF8}{gkai}
%原始的AES 和 方案的AES 效率进行比较
%
%\end{CJK}


